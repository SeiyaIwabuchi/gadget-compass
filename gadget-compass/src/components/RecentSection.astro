---
// RecentSection.astro
import { getCollection } from 'astro:content';
import RecentCard from './RecentCard.astro';

// Content Collectionsから全記事を取得
const allArticles = await getCollection('articles');

// 最新記事を日付順で取得（最大3件）
const recentArticles = allArticles
    .sort((a, b) => {
        const dateA = a.data.pubDate ? new Date(a.data.pubDate).getTime() : 0;
        const dateB = b.data.pubDate ? new Date(b.data.pubDate).getTime() : 0;
        return dateB - dateA;
    })
    .slice(0, 3);

// URL構築用のベースパス
const basePath = import.meta.env.BASE_URL || '/';

// タグに基づく絵文字マッピング
function getEmojiForTags(tags: string[]): string {
    const tagEmojiMap: Record<string, string> = {
        'プログラミング': '💻',
        'React': '⚛️',
        'JavaScript': '🟨',
        'TypeScript': '🔷',
        'サーバー': '🖥️',
        'Proxmox': '🔧',
        '自宅ラボ': '🏠',
        'オーディオ': '🎧',
        'ワイヤレス': '📡',
        'ノイズキャンセリング': '🔇',
        'レビュー': '📝',
        'ガジェット': '📱',
        'AI': '🤖',
        'Web開発': '🌐',
        'データベース': '🗄️',
        'セキュリティ': '🔒',
        'ネットワーク': '🌐',
        'クラウド': '☁️',
        'Docker': '🐳',
        'Linux': '🐧'
    };
    
    for (const tag of tags) {
        if (tagEmojiMap[tag]) {
            return tagEmojiMap[tag];
        }
    }
    return '📄'; // デフォルト絵文字
}

// 星評価を生成する関数
function generateStarRating(rating: number): { fullStars: number, emptyStars: number, rating: number } {
    const fullStars = Math.floor(rating);
    const emptyStars = 5 - fullStars;
    return { fullStars, emptyStars, rating };
}

// 読了時間を計算する関数（文字数から推定）
function calculateReadTime(content: string): number {
    const wordsPerMinute = 300; // 日本語の平均読書速度（文字/分）
    const wordCount = content.length;
    return Math.max(1, Math.ceil(wordCount / wordsPerMinute));
}

// モック統計データを生成
function generateMockStats() {
    return {
        views: Math.floor(Math.random() * 2000) + 100,
        comments: Math.floor(Math.random() * 30) + 1,
        likes: Math.floor(Math.random() * 100) + 1
    };
}
---

<section class="recent-section">
    <div class="section-header">
        <div class="section-icon">🔄</div>
        <h2 class="section-title">最新記事</h2>
    </div>
    <div class="article-list">
        {recentArticles.map((article, index) => {
            const stats = generateMockStats();
            const stars = generateStarRating(article.data.stars || 4.0);
            const readTime = calculateReadTime(article.body);
            const emoji = getEmojiForTags(article.data.tags || []);
            const articleUrl = `${basePath}/articles/${article.slug}`.replace(/\/+/g, '/');
            
            return (
                <RecentCard
                    article={article}
                    index={index}
                    basePath={basePath}
                    stats={stats}
                    stars={stars}
                    readTime={readTime}
                    emoji={emoji}
                    articleUrl={articleUrl}
                />
            );
        })}
    </div>
</section>

<script>
    // Favorite functionality
    function toggleFavorite(button: HTMLElement): void {
        const articleId = button.getAttribute("data-article");
        if (!articleId) return;

        const isActive = button.classList.contains("active");

        if (isActive) {
            button.classList.remove("active");
            button.innerHTML = "♡";
            removeFavorite(articleId);
        } else {
            button.classList.add("active");
            button.innerHTML = "♥";
            addFavorite(articleId);
        }
    }

    // Make toggleFavorite globally available
    (window as any).toggleFavorite = toggleFavorite;

    function addFavorite(articleId: string): void {
        let favorites: string[] = JSON.parse(
            localStorage.getItem("favorites") || "[]",
        );
        if (!favorites.includes(articleId)) {
            favorites.push(articleId);
            localStorage.setItem("favorites", JSON.stringify(favorites));
        }
    }

    function removeFavorite(articleId: string): void {
        let favorites: string[] = JSON.parse(
            localStorage.getItem("favorites") || "[]",
        );
        favorites = favorites.filter((id) => id !== articleId);
        localStorage.setItem("favorites", JSON.stringify(favorites));
    }

    // Load favorites on page load
    function loadFavorites(): void {
        const favorites: string[] = JSON.parse(
            localStorage.getItem("favorites") || "[]",
        );
        favorites.forEach((articleId) => {
            const button = document.querySelector(
                `[data-article="${articleId}"]`,
            ) as HTMLElement;
            if (button) {
                button.classList.add("active");
                button.innerHTML = "♥";
            }
        });
    }
    // Initialize everything when DOM is loaded
    document.addEventListener("DOMContentLoaded", () => {
        loadFavorites();
    });
</script>

<style>
    .recent-section {
        border-top: 1px solid var(--border);
    }
    
    .section-header {
        display: flex;
        align-items: center;
        gap: 1rem;
        margin-bottom: 2rem;
        padding: 0 1.5rem;
        padding-top: 1.5rem;
    }
    
    .section-title {
        font-size: 1.25rem;
        font-weight: 700;
        color: var(--text-primary);
    }
    
    .section-icon {
        width: 40px;
        height: 40px;
        background: var(--gradient);
        border-radius: 8px;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 1.2rem;
    }
    
    .article-list {
        display: flex;
        flex-direction: column;
        gap: 1.5rem;
        padding: 1.5rem;
    }
    
    /* Fade-in animation for cards - keeping timing for the list */
    .article-list :global(.fade-in-card:nth-child(1)) {
        transition-delay: 0s;
    }
    
    .article-list :global(.fade-in-card:nth-child(2)) {
        transition-delay: 0.1s;
    }
    
    .article-list :global(.fade-in-card:nth-child(3)) {
        transition-delay: 0.2s;
    }
    
    .article-list :global(.fade-in-card:nth-child(4)) {
        transition-delay: 0.3s;
    }
    
    .article-list :global(.fade-in-card:nth-child(5)) {
        transition-delay: 0.4s;
    }
    
    @media (max-width: 768px) {
        .recent-item {
            flex-direction: column;
            align-items: flex-start;
        }
    }
</style>
