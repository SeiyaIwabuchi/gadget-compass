
---
import Header from "../components/Header.astro";
import Navigation from "../components/Navigation.astro";
import Breadcrumb from "../components/Breadcrumb.astro";
import Hero from "../components/Hero.astro";
import MobileMenu from "../components/MobileMenu.astro";
import "../styles/variables.css";
import TrendingSection from "../components/TrendingSection.astro";
import MainContent from "../components/MainContent.astro";
import Sidebar from "../components/Sidebar.astro";
import NewsletterSubscribe from "../components/NewsletterSubscribe.astro";
import ContentCategories from "../components/ContentCategories.astro";
import Footer from "../components/Footer.astro";
---
<!DOCTYPE html>
<html lang="ja">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>„Ç¨„Ç∏„Çß„ÉÉ„Éà„Ç≥„É≥„Éë„Çπüß≠ | „Ç¨„Ç∏„Çß„ÉÉ„ÉàÊé¢Ê±Ç„ÅÆÊóÖ„Å´ÁµÇ„Çè„Çä„ÅØ„Å™„ÅÑ</title>
    
    <!-- PWA Meta Tags -->
    <meta name="description" content="ÊúÄÊñ∞„Ç¨„Ç∏„Çß„ÉÉ„Éà„Åã„ÇâÊäÄË°ìËß£Ë™¨„Åæ„Åß„ÄÅIT„ÅÆ‰∏ñÁïå„ÇíÊ∑±„ÅèÊéò„Çä‰∏ã„Åí„Çã„Ç¨„Ç∏„Çß„ÉÉ„Éà„É¨„Éì„É•„Éº„Çµ„Ç§„Éà">
    <meta name="theme-color" content="#1e40af">
    <link rel="manifest" href="manifest.json">
    <link rel="apple-touch-icon" href="icon-192x192.png">
    
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Noto+Sans+JP:wght@300;400;500;600;700&display=swap');

        /* Progress Bar */
        .progress-bar {
            position: fixed;
            top: 0;
            left: 0;
            width: 0%;
            height: 3px;
            background: linear-gradient(90deg, var(--accent-orange), var(--secondary-blue));
            z-index: 1001;
            transition: width 0.1s ease;
        }

        /* Main Content */
        .main-container {
            display: grid;
            grid-template-columns: 2fr 1fr;
            gap: 2rem;
            padding: 2rem 0;
        }

        /* Mobile Styles */
        @media (max-width: 768px) {
            .main-container {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <!-- Progress Bar -->
    <div class="progress-bar" id="progressBar"></div>

    <Header />
    <Navigation />
    <Breadcrumb />
    <Hero />
    <MobileMenu />
    <!-- Main Container -->
    <div class="container" id="content">
        <!-- Trending Section -->
        <TrendingSection />

        <div class="main-container">
            <!-- Main Content -->
            <MainContent />

            <!-- Sidebar -->
            <Sidebar />
        </div>
    </div>

    <!-- Newsletter Subscribe Section -->
    <NewsletterSubscribe />

    <!-- Content Categories -->
    <ContentCategories />

    <!-- Footer -->
    <Footer />

    <script>
        // Compass rotation based on scroll
        let lastScrollTop = 0;
        let compassRotation = 0;

        function updateCompassRotation(): void {
            const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
            const scrollDelta = scrollTop - lastScrollTop;
            
            // Rotate compass based on scroll direction and speed
            compassRotation += scrollDelta * 0.5; // Adjust multiplier for sensitivity
            
            const compass = document.querySelector('.compass-logo') as HTMLElement;
            if (compass) {
                compass.style.transform = `rotate(${compassRotation}deg)`;
            }
            
            lastScrollTop = scrollTop <= 0 ? 0 : scrollTop; // Prevent negative scrolling
        }

        // Throttle scroll events for better performance
        let ticking = false;
        function onScroll(): void {
            if (!ticking) {
                requestAnimationFrame(updateCompassRotation);
                ticking = true;
                setTimeout(() => { ticking = false; }, 16); // ~60fps
            }
        }

        window.addEventListener('scroll', onScroll);

        // Progress Bar
        function updateProgressBar(): void {
            const winScroll = document.body.scrollTop || document.documentElement.scrollTop;
            const height = document.documentElement.scrollHeight - document.documentElement.clientHeight;
            const scrolled = (winScroll / height) * 100;
            const progressBar = document.getElementById('progressBar') as HTMLElement;
            if (progressBar) {
                progressBar.style.width = scrolled + '%';
            }
        }

        window.addEventListener('scroll', updateProgressBar);

        // Filter and Sort functionality
        function setupFilterAndSort(): void {
            const categoryFilter = document.getElementById('categoryFilter') as HTMLSelectElement;
            const tagFilter = document.getElementById('tagFilter') as HTMLSelectElement;
            const sortSelect = document.getElementById('sortSelect') as HTMLSelectElement;

            if (categoryFilter) {
                categoryFilter.addEventListener('change', filterArticles);
            }
            if (tagFilter) {
                tagFilter.addEventListener('change', filterArticles);
            }
            if (sortSelect) {
                sortSelect.addEventListener('change', sortArticles);
            }
        }

        function filterArticles(): void {
            // Filter functionality would be implemented here
            console.log('Filtering articles...');
        }

        function sortArticles(): void {
            // Sort functionality would be implemented here
            console.log('Sorting articles...');
        }

        // Animated counter for trending stats
        function animateCounters(): void {
            const counters = document.querySelectorAll('.stat-number') as NodeListOf<HTMLElement>;
            
            counters.forEach(counter => {
                const target = parseInt(counter.textContent?.replace(/,/g, '') || '0');
                const duration = 2000;
                const step = target / (duration / 16);
                let current = 0;

                const timer = setInterval(() => {
                    current += step;
                    if (current >= target) {
                        current = target;
                        clearInterval(timer);
                    }
                    counter.textContent = Math.floor(current).toLocaleString();
                }, 16);
            });
        }

        // Initialize everything when DOM is loaded
        document.addEventListener('DOMContentLoaded', () => {
            loadFavorites();
            setupFilterAndSort();
            animateCounters();
        });

        // PWA Installation
        let deferredPrompt: any;

        window.addEventListener('beforeinstallprompt', (e: Event) => {
            e.preventDefault();
            deferredPrompt = e;
            
            // Show install button (you could add this to the UI)
            console.log('PWA install prompt available');
        });

        // Register Service Worker
        if ('serviceWorker' in navigator) {
            window.addEventListener('load', () => {
                navigator.serviceWorker.register('/sw.js')
                    .then(registration => {
                        console.log('SW registered: ', registration);
                    })
                    .catch(registrationError => {
                        console.log('SW registration failed: ', registrationError);
                    });
            });
        }

        // Intersection Observer for fade-in animations
        function setupFadeInAnimations(): void {
            const observerOptions: IntersectionObserverInit = {
                threshold: 0.1,
                rootMargin: '0px 0px -50px 0px'
            };

            const observer = new IntersectionObserver((entries) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        entry.target.classList.add('visible');
                        observer.unobserve(entry.target);
                    }
                });
            }, observerOptions);

            // Observe all fade-in cards
            document.querySelectorAll('.fade-in-card').forEach(card => {
                observer.observe(card);
            });
        }

        // Initialize fade-in animations when DOM is loaded
        document.addEventListener('DOMContentLoaded', setupFadeInAnimations);

        // Smooth scroll for CTA button
        const ctaButton = document.querySelector('.cta-button') as HTMLElement;
        if (ctaButton) {
            ctaButton.addEventListener('click', (e: Event) => {
                e.preventDefault();
                const target = document.querySelector('#content') as HTMLElement;
                if (target) {
                    target.scrollIntoView({
                        behavior: 'smooth',
                        block: 'start'
                    });
                }
            });
        }

        function toggleMobileMenu(): void {
            const mobileMenu = document.getElementById('mobileMenu') as HTMLElement;
            if (!mobileMenu) return;
            
            if (mobileMenu.classList.contains('active')) {
                // Start closing animation
                mobileMenu.classList.remove('active');
                mobileMenu.classList.add('closing');
                
                // Hide menu after animation completes
                setTimeout(() => {
                    mobileMenu.classList.remove('closing');
                    mobileMenu.style.display = 'none';
                }, 300); // Match animation duration
            } else {
                // Show and start opening animation
                mobileMenu.style.display = 'block';
                mobileMenu.classList.add('active');
            }
        }

        // Make toggleMobileMenu globally available
        (window as any).toggleMobileMenu = toggleMobileMenu;

        // Close mobile menu when clicking outside
        document.addEventListener('click', function(event: Event) {
            const mobileMenu = document.getElementById('mobileMenu') as HTMLElement;
            const hamburger = document.querySelector('.hamburger') as HTMLElement;
            const target = event.target as HTMLElement;
            
            if (mobileMenu && hamburger && target && 
                !mobileMenu.contains(target) && !hamburger.contains(target) && 
                mobileMenu.classList.contains('active')) {
                // Use the same animated closing logic
                mobileMenu.classList.remove('active');
                mobileMenu.classList.add('closing');
                
                setTimeout(() => {
                    mobileMenu.classList.remove('closing');
                    mobileMenu.style.display = 'none';
                }, 300);
            }
        });

        // Handle tag clicks
        document.querySelectorAll('.tag').forEach(tag => {
            tag.addEventListener('click', function(this: HTMLElement) {
                console.log('Tag clicked:', this.textContent);
                // Add filter functionality here
            });
        });

        // Handle newsletter form (desktop)
        const newsletterForm = document.querySelector('.newsletter-form') as HTMLFormElement;
        if (newsletterForm) {
            newsletterForm.addEventListener('submit', function(e: Event) {
                e.preventDefault();
                const emailInput = this.querySelector('.newsletter-input') as HTMLInputElement;
                if (emailInput && emailInput.value) {
                    alert('ÁôªÈå≤„ÅÇ„Çä„Åå„Å®„ÅÜ„Åî„Åñ„ÅÑ„Åæ„ÅôÔºÅ');
                    emailInput.value = '';
                }
            });
        }

        // Handle mobile newsletter form
        const mobileNewsletterForm = document.querySelector('.mobile-newsletter-form') as HTMLFormElement;
        if (mobileNewsletterForm) {
            mobileNewsletterForm.addEventListener('submit', function(e: Event) {
                e.preventDefault();
                const emailInput = this.querySelector('.mobile-newsletter-input') as HTMLInputElement;
                if (emailInput && emailInput.value) {
                    alert('ÁôªÈå≤„ÅÇ„Çä„Åå„Å®„ÅÜ„Åî„Åñ„ÅÑ„Åæ„ÅôÔºÅ');
                    emailInput.value = '';
                }
            });
        }

        // Handle main newsletter subscribe form
        const newsletterSubscribeForm = document.querySelector('.newsletter-subscribe-form') as HTMLFormElement;
        if (newsletterSubscribeForm) {
            newsletterSubscribeForm.addEventListener('submit', function(e: Event) {
                e.preventDefault();
                const emailInput = this.querySelector('.newsletter-subscribe-input') as HTMLInputElement;
                if (emailInput && emailInput.value) {
                    alert('ÁôªÈå≤„ÅÇ„Çä„Åå„Å®„ÅÜ„Åî„Åñ„ÅÑ„Åæ„ÅôÔºÅÊúÄÊñ∞ÊÉÖÂ†±„Çí„ÅäÂ±ä„Åë„Åó„Åæ„Åô„ÄÇ');
                    emailInput.value = '';
                }
            });
        }
    </script>
</body>
</html>
